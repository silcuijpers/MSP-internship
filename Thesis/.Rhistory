View(sign.E.MTAB)
install.packages("CePa")
library(CePa)
install.packages("netgsa")
?log2
lmfit
fit
#fitting a linear model to gene expression data
fit <- lmFit(gset, design)
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# Make column names by using the sample names
# In the current dataset this is for example "GSM701076"
fvarLabels(gset) <- make.names(fvarLabels(gset))
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
#load installed packages
library(GEOquery)
library(limma)
library(EnhancedVolcano)
library(VennDiagram)
library(ggfortify)
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# Make column names by using the sample names
# In the current dataset this is for example "GSM701076"
fvarLabels(gset) <- make.names(fvarLabels(gset))
# assigning each sample to one of the six groups
gsms <- "10101010101010101032323232323232323232544441054545454554545410324"
sml <- strsplit(gsms, split="")[[1]]
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "baseline"] <- "baseline"
library(clusterProfiler)
library(wordcloud)
#BiocManager::install("clusterProfiler", version = "3.8")
#BiocManager::install("pathview")
install.packages("wordcloud")
#BiocManager::install("clusterProfiler", version = "3.8")
#BiocManager::install("pathview")
install.packages("wordcloud")
library(clusterProfiler)
library(wordcloud)
#BiocManager::install("clusterProfiler", version = "3.8")
#BiocManager::install("pathview")
install.packages("wordcloud")
install.packages("wordcloud")
library(clusterProfiler)
library(wordcloud)
library(clusterProfiler)
BiocManager::install("clusterProfiler", version = "3.8")
BiocManager::install("pathview")
library(wordcloud)
library(clusterProfiler)
library(EnhancedVolcano)
library(VennDiagram)
library(ggfortify)
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# Make column names by using the sample names
# In the current dataset this is for example "GSM701076"
fvarLabels(gset) <- make.names(fvarLabels(gset))
# assigning each sample to one of the six groups
gsms <- "10101010101010101032323232323232323232544441054545454554545410324"
sml <- strsplit(gsms, split="")[[1]]
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "baseline"] <- "baseline"
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "3 months"] <-"olive oil"
gset$Group[gset$`intervention:ch1` == "nuts" & gset$`timepoint:ch1` == "baseline"] <-"nuts baseline"
gset$Group[gset$`intervention:ch1` == "nuts" & gset$`timepoint:ch1` == "3 months"] <-"nuts"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "baseline"] <-"low fat baseline"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "3 months"] <-"low fat"
gs <- factor(sml)
groups <- make.names(c("olive oil","baseline","nuts","nuts baseline","low fat","low fat baseline"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
expres=exprs(gset)
expres
#making boxplot of raw expression data
dev.new(width=3+ncol(gset)/6, height=5)
png('downloads/boxplotraw.png')
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("rawdata")
boxplot(expres[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topright", groups, fill=palette(), bty="n")
dev.off()
# plotting pca of raw data
png('downloads/pca_raw.png')
texpres=t(expres)
pca_result <- prcomp(texpres, scale = TRUE)
autoplot(pca_result, data = as.data.frame(gset), colour = "group", scale = TRUE, label = TRUE, label.size = 3)
dev.off()
# clustering the raw expression data
sample_distraw = dist(texpres)
clusters <-hclust(sample_distraw, method = "complete")
png('downloads/clustering_raw.png')
plot(clusters, labels = gset$geo_accession, label.size = 1, cex = 0.5,main = "")
title(main= "Clustering raw expression data")
dev.off()
# replacing values smaller then 0 with NaN and log transform each element
ex<-  exprs(gset)
ex[which(ex <= 0)]<- NaN
exprs(gset) <- log2(ex)
dev.new(width=3+ncol(gset)/6, height=5)
png('downloads/boxplotlog2.png')
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("log2 data")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("bottomleft", groups, fill=palette(), bty="n")
dev.off()
# plotting pca of log transformed data
t.ex= t(exprs(gset))
png('downloads/pcalog.png')
pca_result_log <- prcomp(t.ex, scale = TRUE)
autoplot(pca_result_log, data = as.data.frame(gset), colour = "group",scale = TRUE, label = TRUE, label.size = 3)
dev.off()
#clustering the log transformed data
sample_dist = dist(t.ex)
clusters <-hclust(sample_dist, method = "complete")
png('downloads/clustering_log.png')
plot(clusters, labels = gset$geo_accession, label.size = 1, cex = 0.5,main = "")
title(main= "Clustering log transformed data")
dev.off()
#calculate the number of rows with Na
rows_with_na <- sum(!complete.cases(ex))
print(rows_with_na)
#removing rows with missing values (NA)
gset <- gset[complete.cases(exprs(gset)), ]
#fitting a linear model to gene expression data
fit <- lmFit(gset, design)
#making a contrast matrix of group1 olive oil and group2 baseline to calculate the log 2 fold change
cts.olive <- c(paste(groups[1],"-",groups[2],sep=""))
cont.matrix.olive<- makeContrasts(contrasts=cts.olive, levels=design)
fit.olive <- contrasts.fit(fit, cont.matrix.olive)
fit.olive <- eBayes(fit.olive, 0.01)# standard deviation of 0.01
cts.nuts <- c(paste(groups[3],"-",groups[4],sep=""))
cont.matrix.nuts<- makeContrasts(contrasts=cts.nuts, levels=design)
fit.nuts <- contrasts.fit(fit, cont.matrix.nuts)
fit.nuts <- eBayes(fit.nuts, 0.01)
cts.lowfat <- c(paste(groups[5],"-",groups[6],sep=""))
cont.matrix.lowfat<- makeContrasts(contrasts=cts.lowfat, levels=design)
fit.lowfat <- contrasts.fit(fit, cont.matrix.lowfat)
fit.lowfat <- eBayes(fit.lowfat, 0.01)
#making top tables for each group using benjamini-hochberg to adjust p-values
tT.olive<- topTable(fit.olive, adjust="BH", sort.by="B", number=Inf)
tT.nuts<-topTable(fit.nuts, adjust="BH", sort.by="B", number = Inf)
tT.lowfat<-topTable(fit.lowfat, adjust="BH", sort.by="B", number= Inf)
# writing top tables of top signigcant genes for each group
tT.olive <- subset(tT.olive, select=c("ID", "Gene.symbol", "Gene.ID", "logFC", "P.Value", "adj.P.Val", "B"))
write.table(tT.olive, file=stdout(), row.names=F, sep="\t")
tT.nuts <- subset(tT.nuts, select=c("ID", "Gene.symbol", "Gene.ID", "logFC", "P.Value", "adj.P.Val", "B"))
write.table(tT.nuts, file=stdout(), row.names=F, sep="\t")
tT.lowfat <- subset(tT.lowfat, select=c("ID", "Gene.symbol", "Gene.ID", "logFC", "P.Value", "adj.P.Val", "B"))
write.table(tT.lowfat, file=stdout(), row.names=F, sep="\t")
#plot for adjusted p-value distribution olive oil
png('downloads/olive-adjustedpvalue.png')
hist(tT.olive$adj.P.Val, col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "Olive oil: P-adj value distribution")
dev.off()
# Olive oil p-value distribution
png('downloads/olive-pvalue.png')
ids<-bitr(names(tT.lowfat), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb="org.Dm.eg.db") # remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
BiocManager::install("clusterProfiler", version = "3.8")
BiocManager::install("clusterProfiler", version = "3.18")
install.packages("wordcloud")
install.packages("wordcloud")
library(clusterProfiler)
library(wordcloud)
library(clusterProfiler)
library(BiocManager)
BiocManager::install("clusterProfiler", version = "3.18")
install.packages("wordcloud")
install.packages("wordcloud")
library(clusterProfiler)
library(clusterProfiler)
library(clusterProfiler)
BiocManager::install("clusterProfiler", version = "3.18")
install.packages("BiocManager")
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("clusterProfiler", version = "3.8")
BiocManager::install("clusterProfiler", version = "3.18")
library(clusterProfiler)
library(wordcloud)
ids<-bitr(names(tT.lowfat), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb="org.Dm.eg.db") # remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
library(clusterProfiler)
ids<-bitr(names(tT.lowfat), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb="org.Dm.eg.db") # remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
bitr(names(tT.lowfat), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb="org.Dm.eg.db") # remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
?bitr
??bitr
ids->bitr(names(tT.lowfat), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb="org.Dm.eg.db") # remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
ids<-bitr(names(tT.lowfat), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb="org.Dm.eg.db") # remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
library(clusterProfiler)
if (!("clusterProfiler" %in% installed.packages())) {
# Install this package if it isn't installed yet
BiocManager::install("clusterProfiler", update = FALSE)
}
# This is required to make one of the plots that clusterProfiler will make
if (!("ggupset" %in% installed.packages())) {
# Install this package if it isn't installed yet
BiocManager::install("ggupset", update = FALSE)
}
if (!("msigdbr" %in% installed.packages())) {
# Install this package if it isn't installed yet
BiocManager::install("msigdbr", update = FALSE)
}
if (!("org.Hs.eg.db" %in% installed.packages())) {
# Install this package if it isn't installed yet
BiocManager::install("org.Hs.eg.db", update = FALSE)
View(tT.lowfat)
View(tT.lowfat)
tT.lowfat$ID
tT.lowfat$ID
view(tT.lowfat$ID)
view(tT.lowfat$ID)
show(tT.lowfat$ID)
show(tT.lowfat$ID)
show(tT.lowfat)
view(tT.lowfat)
View(ex)
View(fit)
View(fit)
View(fit)
View(fit)
View(fit)
View(tT.nuts)
View(tT.nuts)
View(tT.nuts)
View(tT.nuts)
gset$geo_accession
gset$title
gset$title->title
gset$title->title
gset$title->title
# Install BiocManager from CRAN
install.packages("BiocManager")
# Load BiocManager
library(BiocManager)
# Install Bioconductor packages
BiocManager::install("GEOquery")
BiocManager::install("limma")
BiocManager::install("EnhancedVolcano")
BiocManager::install("VennDiagram")
#load installed packages
library(GEOquery)
library(limma)
library(EnhancedVolcano)
library(VennDiagram)
library(ggfortify)
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# Make column names by using the sample names
# In the current dataset this is for example "GSM701076"
fvarLabels(gset) <- make.names(fvarLabels(gset))
# assigning each sample to one of the six groups
gsms <- "10101010101010101032323232323232323232544441054545454554545410324"
sml <- strsplit(gsms, split="")[[1]]
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "baseline"] <- "baseline"
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "3 months"] <-"olive oil"
gset$Group[gset$`intervention:ch1` == "nuts" & gset$`timepoint:ch1` == "baseline"] <-"nuts baseline"
gset$Group[gset$`intervention:ch1` == "nuts" & gset$`timepoint:ch1` == "3 months"] <-"nuts"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "baseline"] <-"low fat baseline"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "3 months"] <-"low fat"
gs <- factor(sml)
groups <- make.names(c("olive oil","baseline","nuts","nuts baseline","low fat","low fat baseline"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
expres=exprs(gset)
expres
+
#making boxplot of raw expression data
dev.new(width=3+ncol(gset)/6, height=5)
png('downloads/boxplotraw.png')
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("rawdata")
boxplot(expres[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topright", groups, fill=palette(), bty="n")
dev.off()
# plotting pca of raw data
png('downloads/pca_raw.png')
boxplot(expres[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topright", groups, fill=palette(), bty="n")
dev.off()
# plotting pca of raw data
png('downloads/pca_raw.png')
texpres=t(expres)
pca_result <- prcomp(texpres, scale = TRUE)
autoplot(pca_result, data = as.data.frame(gset), colour = "group", scale = TRUE, label = TRUE, label.size = 3)
dev.off()
# clustering the raw expression data
sample_distraw = dist(texpres)
clusters <-hclust(sample_distraw, method = "complete")
png('downloads/clustering_raw.png')
plot(clusters, labels = gset$geo_accession, label.size = 1, cex = 0.5,main = "")
title(main= "Clustering raw expression data")
dev.off()
# replacing values smaller then 0 with NaN and log transform each element
ex<-  exprs(gset)
ex[which(ex <= 0)]<- NaN
exprs(gset) <- log2(ex)
dev.new(width=3+ncol(gset)/6, height=5)
png('downloads/boxplotlog2.png')
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("log2 data")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("bottomleft", groups, fill=palette(), bty="n")
dev.off()
# plotting pca of log transformed data
t.ex= t(exprs(gset))
png('downloads/pcalog.png')
pca_result_log <- prcomp(t.ex, scale = TRUE)
autoplot(pca_result_log, data = as.data.frame(gset), colour = "group",scale = TRUE, label = TRUE, label.size = 3)
# Install BiocManager from CRAN
install.packages("BiocManager")
# Load BiocManager
library(BiocManager)
# Install Bioconductor packages
BiocManager::install("GEOquery")
# Make column names by using the sample names
# In the current dataset this is for example "GSM701076"
fvarLabels(gset) <- make.names(fvarLabels(gset))
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "baseline"] <-"low fat baseline"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "3 months"] <-"low fat"
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
#load installed packages
library(GEOquery)
library(limma)
library(EnhancedVolcano)
library(VennDiagram)
library(ggfortify)
#loading data from GEO
gset <- getGEO("GSE28358",GSEMatrix=TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL571", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# Make column names by using the sample names
# In the current dataset this is for example "GSM701076"
fvarLabels(gset) <- make.names(fvarLabels(gset))
# assigning each sample to one of the six groups
gsms <- "10101010101010101032323232323232323232544441054545454554545410324"
sml <- strsplit(gsms, split="")[[1]]
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "baseline"] <- "baseline"
gset$Group[gset$`intervention:ch1` == "olive oil" & gset$`timepoint:ch1` == "3 months"] <-"olive oil"
gset$Group[gset$`intervention:ch1` == "nuts" & gset$`timepoint:ch1` == "baseline"] <-"nuts baseline"
gset$Group[gset$`intervention:ch1` == "nuts" & gset$`timepoint:ch1` == "3 months"] <-"nuts"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "baseline"] <-"low fat baseline"
gset$Group[gset$`intervention:ch1` == "low fat" & gset$`timepoint:ch1` == "3 months"] <-"low fat"
gs <- factor(sml)
groups <- make.names(c("olive oil","baseline","nuts","nuts baseline","low fat","low fat baseline"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
expres=exprs(gset)
expres
#making boxplot of raw expression data
dev.new(width=3+ncol(gset)/6, height=5)
png('downloads/boxplotraw.png')
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("rawdata")
boxplot(expres[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topright", groups, fill=palette(), bty="n")
dev.off()
# plotting pca of raw data
png('downloads/pca_raw.png')
texpres=t(expres)
pca_result <- prcomp(texpres, scale = TRUE)
autoplot(pca_result, data = as.data.frame(gset), colour = "group", scale = TRUE, label = TRUE, label.size = 3)
dev.off()
# clustering the raw expression data
sample_distraw = dist(texpres)
gset$title->title
gset$status->title
fit
#calculate the number of rows with Na
rows_with_na <- sum(!complete.cases(ex))
print(rows_with_na)
#removing rows with missing values (NA)
gset <- gset[complete.cases(exprs(gset)), ]
#fitting a linear model to gene expression data
fit <- lmFit(gset, design)
fit$genes
fit$genes -> name
View(name)
View(name)
name$ID
file_path <- "example.txt"
write.table(ID, file = file_path, append = FALSE, quote = FALSE, col.names = FALSE, row.names = FALSE)
ID<-name$ID
file_path <- "example.txt"
write.table(ID, file = file_path, append = FALSE, quote = FALSE, col.names = FALSE, row.names = FALSE)
file_path <- "example.tsv"
file_path <- "example.tsv"
write.table(ID, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
library(biomaRt)
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
BiocManager::install("biomaRt")
write.table(df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)a
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
BiocManager::install("biomaRt")
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
# Install BiocManager from CRAN
install.packages("BiocManager")
install.packages("BiocManager")
# Load BiocManager
library(BiocManager)
# Install Bioconductor packages
BiocManager::install("GEOquery")
########################################################################################
#load installed packages
library(GEOquery)
library(limma)
library(EnhancedVolcano)
library(VennDiagram)
library(ggfortify)
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
install.packages("biomaRt")
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
crossmapid<- "CrossMapID"
Crossmap_data <- read.table(crossmapid, header = TRUE, sep = "\t")
setwd("~/Documents/GitHub/MSP-internship/Thesis")
crossmapid<- "CrossMapID"
Crossmap_data <- read.table(crossmapid, header = TRUE, sep = "\t")
crossmapid<- "CrossMapID.tsv"
Crossmap_data <- read.table(crossmapid, header = TRUE, sep = "\t")
View(Crossmap_data)
View(Crossmap_data)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
BiocManager::install("biomaRt")
crossmapid<- "CrossMapID.csv"
Crossmap_data <- read.table(crossmapid, header = TRUE, sep = "\t")
View(Crossmap_data)
View(Crossmap_data)
BiocManager::install("biomaRt")
force = TRUE
BiocManager::install("biomaRt")
# Load BiocManager
library(BiocManager)
# Install BiocManager from CRAN
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("biomaRt")
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c('affy_hg_u133_plus_2', 'entrezgene_id'),
filters = 'affy_hg_u133_plus_2',
values = ID,
mart = ensembl)
?getBM
library(biomaRt)
